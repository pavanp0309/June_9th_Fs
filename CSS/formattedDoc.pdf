DAY_1 (OBJECTIVE)
🎯WHAT IS CSS ?
🎯WHY CSS ?
🎯FEATURES OF CSS 
🎯WHAT IS SELECTOR
🎯DIFFERENT WAYS TO LINK CSS TO HTML 


CSS: CASCADING STYLE SHEET 
CASCADING :set of rules applied to an html Elements  
     casecade: (it helps browser decide what kind properties to apply to element when properties are applied to same element )
css is used for applying the styles or controls the layout, colors, fonts, and overall visual appearance of web pages.

WHY CSS ?
- Separates content (HTML) from presentation (CSS)
- Makes web pages visually attractive and user-friendly
- Enables responsive design for different devices
- Allows reusability and maintainability of styles
- Reduces code duplication

🎯 CURRENT VERSION OF CSS
- Standard Version: CSS3 (with ongoing updates and new modules)


🎯FEATURES 
1. Flexbox and Grid System (for layouts(weblayouts), dashboards, image galleries, cards)
2. Animations (keyframes, transitions)
3. Transitions and Transformations (rotate, scale, skew, etc.)
4. Advanced Selectors (Pseudo-classes and Pseudo-elements)
5. Responsive Web Design (RWD) using Media Queries
6. CSS Variables (custom properties)
7. Counters, color schemes, enhanced background properties
8. Gradients: linear-gradient, conic-gradient, radial-gradient
9. Box shadows, text shadows
10. Custom fonts using @font-face
11. CSS Functions (calc(), var(), clamp(), etc.)
12. CSS Units (px, em, rem, %, vw, vh, etc.)
13. Layering with z-index
14. CSS specificity and inheritance
        9.box-shadows etc...


🎯 WHAT IS A SELECTOR?
A selector is a pattern used to select the HTML elements you want to style.


🎯SELECTOR : something that selects or chooses  an element 
    Example:
    <h1 id="main-heading" class="title" data-target="heading">Hello</h1>
    - h1: Element selector (selects all <h1> elements)
    - #main-heading: ID selector (selects element with id="main-heading")
    - .title: Class selector (selects elements with class="title")
    - [data-target="heading"]: Attribute selector (selects elements with data-target="heading")

TYPES OF SELECTORS

1. SIMPLE SELECTORS
   - Type Selector (Element/Tag selector): e.g., h1, p, div
   - ID Selector: e.g., #main-heading
   - Class Selector: e.g., .title
   - Group Selector: e.g., h1, p, .title
   - Universal Selector: e.g., *

2. COMBINATOR SELECTORS (Describe the relationship between selectors)
   - Child Selector (>): Selects direct children. Example: div > p
   - Descendant Selector (space): Selects all descendants. Example: div p
   - General Sibling Selector (~): Selects all siblings. Example: h1 ~ p
   - Adjacent Sibling Selector (+): Selects the next sibling. Example: h1 + p

3. PSEUDO-ELEMENT SELECTORS
   - ::first-letter, ::first-line, ::before, ::after, ::placeholder, ::marker, ::selection, etc.

4. PSEUDO-CLASS SELECTORS
   - :first-child, :last-child, :nth-child(), :focus, :required, :max-length, :read-only, :disabled, :checked, :hover, :active, :visited, :not(), etc.

5. ATTRIBUTE SELECTORS
   - [attribute], [attribute="value"], [attribute^="value"], [attribute$="value"], [attribute*="value"], etc.

🎯 CSS SYNTAX
A CSS rule-set consists of a selector and a declaration block:
    selector {
      property: value;
      property2: value2;
    }

🎯 CASCADE, INHERITANCE, AND SPECIFICITY
- Cascade: Determines which CSS rule applies when multiple rules target the same element.
- Inheritance: Some CSS properties are inherited from parent to child elements (e.g., color, font-family).
- Specificity: Determines which selector has higher priority.

🎯 COMMENTS IN CSS
    /* This is a comment */

🎯 DIFFERENT WAYS TO ADD CSS TO HTML

1. Inline CSS :directly we apply to an Html Element  
   - Example: <h1 style="color: red; text-align: center;">Hello</h1>
     - style: Attribute
     - color, text-align: Properties/Keys
     - red, center: Values

Example :
      <h1 style="color: red;text-transform: lowercase;text-align: center;text-decoration: underline;">HELLO CSS DEV</h1>
     <div style="background-color: lightcyan;border: 2px solid red;width: 100px;border-radius: 10px;padding: 10px;">
        <p style="color:orangered">IPHONE</p>
        <p style="color: green;">RS1000</p>
     </div>
    

2. Internal CSS: WRITEN USING STYLE TAG INSIDE HEAD TAG
   - Example:
     <head>
       <style>
         selector {
           property: value;
         }
       </style>
     </head>

3. External CSS: Sepearte file Linked html head TAG
   - Example:
     <head>
       <link rel="stylesheet" href="./index.css" />
     </head>

🎯 BEST PRACTICES
- Use external CSS for large projects for better maintainability.
- Use class selectors for reusable styles.
- Avoid using too many inline styles.
- Use semantic HTML for better accessibility and SEO.
- Organize CSS with comments and logical grouping.

🔎🐕‍🦺SELECTORS
CSS selectors help you target HTML elements to apply styles.
1. ID Selector
Syntax:#idName { ... }
🔹Targets one unique element with that id.
🔹 Should only appear once in the HTML.
🔹use For something that exists only once on the page:
 eg:  Main header Footer Special banner

2.Class Selector
.className { ... }
🔹 Can be used on multiple elements.
🔹 One element can have multiple classes.
🔹 To create reusable styles. eg Buttons Card Alert Sections 
eg:
<p class="highlight">Hello CSS</p>
<h3 class="highlight">Simple Selectors</h3>
.highlight {
  color: blue;
  text-transform: uppercase;
}

3.Tag / Element Selector
Syntax:tagName { ... }
🔹Targets all elements of that tag.
🔹 Apply default or base styles to HTML elements like:
      ▶All headings (h1, h2)
      ▶Paragraphs (p)
      ▶Lists (ul, li)

4.Universal Selector
Syntax:* { ... }
🔹Selects every element on the page.
🔹 Reset default browser styles.
🔹 Apply a global font or base rule.
🔹Don’t overuse it on heavy styles (like shadows) – can slow rendering.
example:
* {
  margin: 0;
  padding: 0;
  box-sizing: border-box;
}
5.Group Selector 
Syntax: selector1, selector2, selector3 { ... }

 ▶Apply the same styles to different selectors.
 ▶Avoid writing the same style again and again.
 ▶Keeps CSS clean & DRY (Don’t Repeat Yourself).


Specificity (who wins when rules conflict)
▶ID (#id)	100
▶Class (.class)	10
▶Tag (div)	1
▶Universal (*)	0
 Higher number → higher priority.

CSS Combinators :
CSS combinators define relationships between selectors, allowing you to target elements based on their position in the HTML structure.

1.Descendant Selector (A B)
 Selects: All <B> elements that are descendants (children, grandchildren, etc.) of <A>
 example:
 div p {
  color: green;
}
This will color all <p> elements inside a <div> (no matter how deeply nested) green.
div .text {
  color: rgb(0, 17, 128);
}
Selects: Any element with class .text that is a descendant of a <div>.

2.Child Selector (A > B)
Selects: All <B> elements that are direct children of <A>.
div > p {
  color: red;
}
This will color only the <p> elements that are direct children of <div> red.

3.Adjacent Sibling Selector (A + B)
Selects: The first <B> element immediately after <A> (they share the same parent).
example
div + p {
  background-color: aqua;
}
This will set the background color of the first <p> that comes right after a <div> to aqua.

4.General Sibling Selector (A ~ B)
Selects: All <B> elements that are siblings of <A> and come after <A> (not necessarily immediately).
Example:
div ~ p {
  background-color: orangered;
}
This will set the background color of all <p> elements that are siblings of a <div> and come after it to orangered.

div ~ .general {
  background-color: gold;
}
Selects: All elements with class .general that are siblings of a <div> and come after it.


DAY_2 OBJECTIVE

🎯 BOX MODEL IN CSS

The CSS Box Model is a fundamental concept that describes how elements are structured and spaced on a web page. Every element is considered as a rectangular box, consisting of the following parts (from inside out):

1. Content: The actual content of the box, such as text, images, or other media.
2. Padding: The space between the content and the border. It creates space inside the box, around the content.
   - Properties: padding-top, padding-right, padding-bottom, padding-left, or shorthand: padding
3. Border: A line that wraps around the padding and content. It can have different styles, widths, and colors.
   - Properties: border-style (solid, dashed, dotted, double, groove, ridge, inset, outset, none)
   - border-width, border-color, border-radius (for rounded corners)
   - Individual sides: border-top, border-right, border-bottom, border-left
   border-style (dotted dashed grooved  double solid riged inset outset non )
         border-top-style 
         border-bottom-style 
         border-left-style 
         border-right-style  
  border-color :
         border-top-color 
         border-bottom-color
         border-left-color
         border-right-color  
   border-width 
         border-top-width 
         border-bottom-width
         border-left-width
         border-right-width 
   border-radius 
       border-top-left-radius
       border-top-right-radius
       border-bottom-right-radius
       border-bottom-left-radius
4. Margin: The space outside the border, separating the element from other elements.
   - Properties: margin-top, margin-right, margin-bottom, margin-left, or shorthand: margin

📦 Box Model Formula:
- Total Width = width + padding-left + padding-right + border-left + border-right + margin-left + margin-right
- Total Height = height + padding-top + padding-bottom + border-top + border-bottom + margin-top + margin-bottom

🎯 Additional Box Model Concepts
- box-sizing: Controls how the total width and height of an element are calculated.
  - content-box (default): width/height includes only the content. Padding and border are added outside.
  - border-box: width/height includes content, padding, and border (recommended for layouts).
- overflow: Controls what happens if content overflows the box (visible, hidden, scroll, auto).


DAY_3

Position Properties
 every element in a document flow from left to right  and top to bottom to override these we use position properties 

 position prop are used for layouting overlapping  ,alignment  etc  in the documnet 

 we use (Top left right bottom)-offset values  are used for alignment /positioning the element 

 Types of Position Properties 
 1.static (default)
     it has normal document flow(left-right top-bottom)
     offset values like top left bottom right has no effects on position static 
     zindex propertyy doesnt work on position static

 2.realtive
    it also fallows the normal document flow 
    when applied with offset values like top bottom left and right elememt can moved here 
    position realitive moves to the previous element if there is no previous element it moves realtive to the root element(html)
 3.absolute
      it comes out of normal documnet flow 
      and moves the element from root(html) until unless its parent element is applied with position like realtive absolute fixed
 4.fixed  :
      it comes out of normal documnet flow 
      and element gets fixed even when the content in webpage is scrolled
 5.sticky
       it comes out of normal documnet flow  and behaves like realtive and fixed

z-index
Controls the stacking order.
Only works on positioned elements (relative, absolute, fixed, sticky).


Real-world use cases summary:

😎 Dropdowns, tooltips, modals/popups: usually absolute inside a relative parent.
😎 Sticky navbar: position: sticky; top: 0;.
😎 Floating buttons: position: fixed; bottom: 20px; right: 20px;.
😎 Form fields with icons inside: relative parent + absolute icon.
😎 Fixed footer/header: position: fixed; bottom: 0; width: 100%;.
😎 Blog sidebars: sticky to stay visible while scrolling content.


DAY_4
Day_4
colors
text_properties
FontProperties 

-----------------------------
COLORS IN CSS
-----------------------------
CSS provides multiple ways to specify colors for text, backgrounds, borders, and other elements. Understanding these options helps you create visually appealing and accessible designs.

1. Named Colors
   - Use standard color names like red, blue, green, orange, pink, etc.
   - Example: color: orangered;

2. RGB and RGBA
   - RGB: Uses Red, Green, Blue values (0-255).
     Example: color: rgb(255, 0, 0); // red
   - RGBA: Adds Alpha (opacity, 0-1).
     Example: color: rgba(255, 0, 0, 0.5); // semi-transparent red

3. HEX Colors
   - Uses hexadecimal values (#RRGGBB or #RGB).
   - Example: color: #ff0000; // red

4. HSL and HSLA
   - HSL: Hue (0-360), Saturation (0-100%), Lightness (0-100%).
     Example: color: hsl(120, 100%, 50%); // green
   - HSLA: Adds Alpha (opacity).
     Example: color: hsla(120, 100%, 50%, 0.3);

5. CSS Color Functions (Advanced)
   - color-mix(): Mixes two colors.
     Example: color: color-mix(in srgb, red 60%, blue 40%);
   - color-contrast(): Ensures accessible contrast (browser support limited).

6. Transparency
   - Use rgba(), hsla(), or the opacity property.
   - Example: opacity: 0.7; (applies to the whole element)

Best Practices:
- Use high-contrast color combinations for accessibility.
- Prefer CSS variables for theme consistency.
- Test colors on different devices and backgrounds.

-----------------------------
TEXT PROPERTIES
-----------------------------
CSS text properties control the appearance, alignment, spacing, and decoration of text.

1. color: Sets the text color.
2. text-align: left | right | center | justify
   - Aligns text horizontally within its container.
3. text-transform: none | uppercase | lowercase | capitalize
   - Controls letter casing.
4. text-decoration: underline | overline | line-through | none
   - Adds lines to text (e.g., links).
5. text-shadow: Adds shadow to text.
   - Example: text-shadow: 2px 2px 4px #888;
6. letter-spacing: Adjusts space between letters.
7. word-spacing: Adjusts space between words.
8. line-height: Controls vertical spacing between lines.
9. text-indent: Indents the first line of text.
10. direction: ltr | rtl (left-to-right or right-to-left text)

Example:
.headline {
  color: #333;
  text-align: center;
  text-transform: uppercase;
  text-shadow: 1px 1px 2px #aaa;
}

-----------------------------
FONT PROPERTIES
-----------------------------
Font properties define the typeface, size, style, and weight of text.

1. font-family: Specifies the font(s) to use.
   - Example: font-family: 'Roboto', Arial, sans-serif;
2. font-size: Sets the size of the font (px, em, rem, %, etc.).
   - Example: font-size: 18px;
3. font-weight: normal | bold | 100-900
   - Example: font-weight: 700;
4. font-style: normal | italic | oblique
   - Example: font-style: italic;
5. font-variant: normal | small-caps
   - Example: font-variant: small-caps;
6. font-stretch: normal | condensed | expanded
7. font-feature-settings: Advanced typographic features (ligatures, etc.)
8. @font-face: Import custom fonts.
   - Example:
     @font-face {
       font-family: 'MyFont';
       src: url('myfont.woff2') format('woff2');
     }

Shorthand:
font: style weight size/line-height family;
Example: font: italic bold 16px/1.5 'Roboto', sans-serif;




DAY_5
FLEX_BOX 

Definition:
Flexbox (Flexible Box Layout) is a CSS layout model for arranging elements in a single dimension—either as a row or a column. 
It makes it easy to align, distribute, and order space among items, even when their size is unknown or dynamic.

When to Use Flexbox? (Real-world Use Cases)
Card layouts (service cards, product cards, profile cards)
Navigation bars and footers
Hero sections
Image galleries
Web layouts and dashboards
Form layouts

Key Benefits:
Custom ordering of elements
Vertical and horizontal centering
Responsive design with minimal code


FLEX_BOX PARENT PROPERTIES
display:flex

display: flex; // Enables flexbox on the container
flex-direction: row (default) | row-reverse | column | column-reverse
flex-wrap: wrap | nowrap (default)
flex-flow: flex-direction flex-wrap (shorthand)
justify-content: flex-start | flex-end | center | space-between | space-around | space-evenly
(Aligns items along the main axis)
align-items: flex-start | flex-end | center | stretch | baseline
(Aligns items along the cross axis)
align-content: flex-start | flex-end | center | space-between | space-around | space-evenly
(Aligns multiple lines; works only with flex-wrap: wrap)

Note:

When flex-direction is row, justify-content works horizontally and align-items works vertically.
When flex-direction is column, justify-content works vertically and align-items works horizontally.

FLEX_BOX Child PROPERTIES

order: Controls the order of items (default is 0)
align-self: Overrides align-items for a single item
flex-grow: Defines how much a flex item will grow relative to the rest
flex-shrink: Defines how much a flex item will shrink if needed
flex-basis: Sets the initial main size of a flex item
flex: flex-grow |flex-shrink |flex-basis (shorthand)







