DAY_1 (OBJECTIVE)
🎯WHAT IS CSS ?
🎯WHY CSS ?
🎯FEATURES OF CSS 
🎯WHAT IS SELECTOR
🎯DIFFERENT WAYS TO LINK CSS TO HTML 


CSS: CASCADING STYLE SHEET 
CASCADING :set of rules applied to an html Elements  
     casecade: (it helps browser decide what kind properties to apply to element when properties are applied to same element )
css is used for applying the styles or controls the layout, colors, fonts, and overall visual appearance of web pages.

WHY CSS ?
- Separates content (HTML) from presentation (CSS)
- Makes web pages visually attractive and user-friendly
- Enables responsive design for different devices
- Allows reusability and maintainability of styles
- Reduces code duplication

🎯 CURRENT VERSION OF CSS
- Standard Version: CSS3 (with ongoing updates and new modules)


🎯FEATURES 
1. Flexbox and Grid System (for layouts(weblayouts), dashboards, image galleries, cards)
2. Animations (keyframes, transitions)
3. Transitions and Transformations (rotate, scale, skew, etc.)
4. Advanced Selectors (Pseudo-classes and Pseudo-elements)
5. Responsive Web Design (RWD) using Media Queries
6. CSS Variables (custom properties)
7. Counters, color schemes, enhanced background properties
8. Gradients: linear-gradient, conic-gradient, radial-gradient
9. Box shadows, text shadows
10. Custom fonts using @font-face
11. CSS Functions (calc(), var(), clamp(), etc.)
12. CSS Units (px, em, rem, %, vw, vh, etc.)
13. Layering with z-index
14. CSS specificity and inheritance
        9.box-shadows etc...


🎯 WHAT IS A SELECTOR?
A selector is a pattern used to select the HTML elements you want to style.


🎯SELECTOR : something that selects or chooses  an element 
    Example:
    <h1 id="main-heading" class="title" data-target="heading">Hello</h1>
    - h1: Element selector (selects all <h1> elements)
    - #main-heading: ID selector (selects element with id="main-heading")
    - .title: Class selector (selects elements with class="title")
    - [data-target="heading"]: Attribute selector (selects elements with data-target="heading")

TYPES OF SELECTORS

1. SIMPLE SELECTORS
   - Type Selector (Element/Tag selector): e.g., h1, p, div
   - ID Selector: e.g., #main-heading
   - Class Selector: e.g., .title
   - Group Selector: e.g., h1, p, .title
   - Universal Selector: e.g., *

2. COMBINATOR SELECTORS (Describe the relationship between selectors)
   - Child Selector (>): Selects direct children. Example: div > p
   - Descendant Selector (space): Selects all descendants. Example: div p
   - General Sibling Selector (~): Selects all siblings. Example: h1 ~ p
   - Adjacent Sibling Selector (+): Selects the next sibling. Example: h1 + p

3. PSEUDO-ELEMENT SELECTORS
   - ::first-letter, ::first-line, ::before, ::after, ::placeholder, ::marker, ::selection, etc.

4. PSEUDO-CLASS SELECTORS
   - :first-child, :last-child, :nth-child(), :focus, :required, :max-length, :read-only, :disabled, :checked, :hover, :active, :visited, :not(), etc.

5. ATTRIBUTE SELECTORS
   - [attribute], [attribute="value"], [attribute^="value"], [attribute$="value"], [attribute*="value"], etc.

🎯 CSS SYNTAX
A CSS rule-set consists of a selector and a declaration block:
    selector {
      property: value;
      property2: value2;
    }

🎯 CASCADE, INHERITANCE, AND SPECIFICITY
- Cascade: Determines which CSS rule applies when multiple rules target the same element.
- Inheritance: Some CSS properties are inherited from parent to child elements (e.g., color, font-family).
- Specificity: Determines which selector has higher priority.

🎯 COMMENTS IN CSS
    /* This is a comment */

🎯 DIFFERENT WAYS TO ADD CSS TO HTML

1. Inline CSS :directly we apply to an Html Element  
   - Example: <h1 style="color: red; text-align: center;">Hello</h1>
     - style: Attribute
     - color, text-align: Properties/Keys
     - red, center: Values

Example :
      <h1 style="color: red;text-transform: lowercase;text-align: center;text-decoration: underline;">HELLO CSS DEV</h1>
     <div style="background-color: lightcyan;border: 2px solid red;width: 100px;border-radius: 10px;padding: 10px;">
        <p style="color:orangered">IPHONE</p>
        <p style="color: green;">RS1000</p>
     </div>
    

2. Internal CSS: WRITEN USING STYLE TAG INSIDE HEAD TAG
   - Example:
     <head>
       <style>
         selector {
           property: value;
         }
       </style>
     </head>

3. External CSS: Sepearte file Linked html head TAG
   - Example:
     <head>
       <link rel="stylesheet" href="./index.css" />
     </head>

🎯 BEST PRACTICES
- Use external CSS for large projects for better maintainability.
- Use class selectors for reusable styles.
- Avoid using too many inline styles.
- Use semantic HTML for better accessibility and SEO.
- Organize CSS with comments and logical grouping.

🔎🐕‍🦺SELECTORS
CSS selectors help you target HTML elements to apply styles.
1. ID Selector
Syntax:#idName { ... }
🔹Targets one unique element with that id.
🔹 Should only appear once in the HTML.
🔹use For something that exists only once on the page:
 eg:  Main header Footer Special banner

2.Class Selector
.className { ... }
🔹 Can be used on multiple elements.
🔹 One element can have multiple classes.
🔹 To create reusable styles. eg Buttons Card Alert Sections 
eg:
<p class="highlight">Hello CSS</p>
<h3 class="highlight">Simple Selectors</h3>
.highlight {
  color: blue;
  text-transform: uppercase;
}

3.Tag / Element Selector
Syntax:tagName { ... }
🔹Targets all elements of that tag.
🔹 Apply default or base styles to HTML elements like:
      ▶All headings (h1, h2)
      ▶Paragraphs (p)
      ▶Lists (ul, li)

4.Universal Selector
Syntax:* { ... }
🔹Selects every element on the page.
🔹 Reset default browser styles.
🔹 Apply a global font or base rule.
🔹Don’t overuse it on heavy styles (like shadows) – can slow rendering.
example:
* {
  margin: 0;
  padding: 0;
  box-sizing: border-box;
}
5.Group Selector 
Syntax: selector1, selector2, selector3 { ... }

 ▶Apply the same styles to different selectors.
 ▶Avoid writing the same style again and again.
 ▶Keeps CSS clean & DRY (Don’t Repeat Yourself).


Specificity (who wins when rules conflict)
▶ID (#id)	100
▶Class (.class)	10
▶Tag (div)	1
▶Universal (*)	0
 Higher number → higher priority.

CSS Combinators :
CSS combinators define relationships between selectors, allowing you to target elements based on their position in the HTML structure.

1.Descendant Selector (A B)
 Selects: All <B> elements that are descendants (children, grandchildren, etc.) of <A>
 example:
 div p {
  color: green;
}
This will color all <p> elements inside a <div> (no matter how deeply nested) green.
div .text {
  color: rgb(0, 17, 128);
}
Selects: Any element with class .text that is a descendant of a <div>.

2.Child Selector (A > B)
Selects: All <B> elements that are direct children of <A>.
div > p {
  color: red;
}
This will color only the <p> elements that are direct children of <div> red.

3.Adjacent Sibling Selector (A + B)
Selects: The first <B> element immediately after <A> (they share the same parent).
example
div + p {
  background-color: aqua;
}
This will set the background color of the first <p> that comes right after a <div> to aqua.

4.General Sibling Selector (A ~ B)
Selects: All <B> elements that are siblings of <A> and come after <A> (not necessarily immediately).
Example:
div ~ p {
  background-color: orangered;
}
This will set the background color of all <p> elements that are siblings of a <div> and come after it to orangered.

div ~ .general {
  background-color: gold;
}
Selects: All elements with class .general that are siblings of a <div> and come after it.


DAY_2 OBJECTIVE

🎯 BOX MODEL IN CSS

The CSS Box Model is a fundamental concept that describes how elements are structured and spaced on a web page. Every element is considered as a rectangular box, consisting of the following parts (from inside out):

1. Content: The actual content of the box, such as text, images, or other media.
2. Padding: The space between the content and the border. It creates space inside the box, around the content.
   - Properties: padding-top, padding-right, padding-bottom, padding-left, or shorthand: padding
3. Border: A line that wraps around the padding and content. It can have different styles, widths, and colors.
   - Properties: border-style (solid, dashed, dotted, double, groove, ridge, inset, outset, none)
   - border-width, border-color, border-radius (for rounded corners)
   - Individual sides: border-top, border-right, border-bottom, border-left
   border-style (dotted dashed grooved  double solid riged inset outset non )
         border-top-style 
         border-bottom-style 
         border-left-style 
         border-right-style  
  border-color :
         border-top-color 
         border-bottom-color
         border-left-color
         border-right-color  
   border-width 
         border-top-width 
         border-bottom-width
         border-left-width
         border-right-width 
   border-radius 
       border-top-left-radius
       border-top-right-radius
       border-bottom-right-radius
       border-bottom-left-radius
4. Margin: The space outside the border, separating the element from other elements.
   - Properties: margin-top, margin-right, margin-bottom, margin-left, or shorthand: margin

📦 Box Model Formula:
- Total Width = width + padding-left + padding-right + border-left + border-right + margin-left + margin-right
- Total Height = height + padding-top + padding-bottom + border-top + border-bottom + margin-top + margin-bottom

🎯 Additional Box Model Concepts
- box-sizing: Controls how the total width and height of an element are calculated.
  - content-box (default): width/height includes only the content. Padding and border are added outside.
  - border-box: width/height includes content, padding, and border (recommended for layouts).
- overflow: Controls what happens if content overflows the box (visible, hidden, scroll, auto).

